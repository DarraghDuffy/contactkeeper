{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_ERRORS } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case REGISTER_SUCCESS:\n      return { ...state,\n        users: action.payload,\n        loading: false\n      };\n\n    case REGISTER_FAIL:\n      return { ...state,\n        contacts: [...state.contacts, action.payload]\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact.id !== action.payload.id ? contact : null)\n      };\n\n    case SET_CURRENT:\n      {\n        return { ...state,\n          current: action.payload\n        };\n      }\n\n    case CLEAR_CURRENT:\n      {\n        return { ...state,\n          current: null\n        };\n      }\n\n    case UPDATE_CONTACT:\n      {\n        return { ...state,\n          contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact)\n        };\n      }\n\n    case FILTER_CONTACTS:\n      {\n        return { ...state,\n          filterSearch: action.payload,\n          filtered: state.contacts.filter(contact => {\n            const regex = new RegExp(`${action.payload}`, 'gi');\n            return contact.name.match(regex) || contact.email.match(regex);\n          })\n        };\n      }\n\n    case CONTACT_ERROR:\n      {\n        return { ...state\n        };\n      }\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null,\n        filterSearch: ''\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/darragh/Documents/git/React/frontToBack/contactkeeper/src/context/auth/authReducer.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_ERRORS","state","action","type","users","payload","loading","contacts","DELETE_CONTACT","filter","contact","id","SET_CURRENT","current","CLEAR_CURRENT","UPDATE_CONTACT","map","FILTER_CONTACTS","filterSearch","filtered","regex","RegExp","name","match","email","CONTACT_ERROR","CLEAR_FILTER"],"mappings":"AAAA,SACEA,gBADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,aALF,EAMEC,UANF,EAOEC,MAPF,EAQEC,YARF,QASO,UATP;AAWA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,gBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELG,QAAAA,KAAK,EAAEF,MAAM,CAACG,OAFT;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKZ,aAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELM,QAAAA,QAAQ,EAAE,CAAC,GAAGN,KAAK,CAACM,QAAV,EAAoBL,MAAM,CAACG,OAA3B;AAFL,OAAP;;AAIF,SAAKG,cAAL;AACE,aAAO,EACL,GAAGP,KADE;AAELM,QAAAA,QAAQ,EAAEN,KAAK,CAACM,QAAN,CAAeE,MAAf,CAAuBC,OAAD,IAC9BA,OAAO,CAACC,EAAR,KAAeT,MAAM,CAACG,OAAP,CAAeM,EAA9B,GAAmCD,OAAnC,GAA6C,IADrC;AAFL,OAAP;;AAMF,SAAKE,WAAL;AAAkB;AAChB,eAAO,EACL,GAAGX,KADE;AAELY,UAAAA,OAAO,EAAEX,MAAM,CAACG;AAFX,SAAP;AAID;;AACD,SAAKS,aAAL;AAAoB;AAClB,eAAO,EACL,GAAGb,KADE;AAELY,UAAAA,OAAO,EAAE;AAFJ,SAAP;AAID;;AACD,SAAKE,cAAL;AAAqB;AACnB,eAAO,EACL,GAAGd,KADE;AAELM,UAAAA,QAAQ,EAAEN,KAAK,CAACM,QAAN,CAAeS,GAAf,CAAoBN,OAAD,IAC3BA,OAAO,CAACC,EAAR,KAAeT,MAAM,CAACG,OAAP,CAAeM,EAA9B,GAAmCT,MAAM,CAACG,OAA1C,GAAoDK,OAD5C;AAFL,SAAP;AAMD;;AACD,SAAKO,eAAL;AAAsB;AACpB,eAAO,EACL,GAAGhB,KADE;AAELiB,UAAAA,YAAY,EAAEhB,MAAM,CAACG,OAFhB;AAGLc,UAAAA,QAAQ,EAAElB,KAAK,CAACM,QAAN,CAAeE,MAAf,CAAuBC,OAAD,IAAa;AAC3C,kBAAMU,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEnB,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,mBAAOK,OAAO,CAACY,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BV,OAAO,CAACc,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACD,WAHS;AAHL,SAAP;AAQD;;AAED,SAAKK,aAAL;AAAoB;AAClB,eAAO,EACL,GAAGxB;AADE,SAAP;AAGD;;AAED,SAAKyB,YAAL;AACE,aAAO,EACL,GAAGzB,KADE;AAELkB,QAAAA,QAAQ,EAAE,IAFL;AAGLD,QAAAA,YAAY,EAAE;AAHT,OAAP;;AAKF;AACE,aAAOjB,KAAP;AA/DJ;AAiED,CAlED","sourcesContent":["import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  CLEAR_ERRORS,\n} from '../types';\n\nexport default (state, action) => {\n  switch (action.type) {\n    case REGISTER_SUCCESS:\n      return {\n        ...state,\n        users: action.payload,\n        loading: false,\n      };\n    case REGISTER_FAIL:\n      return {\n        ...state,\n        contacts: [...state.contacts, action.payload],\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter((contact) =>\n          contact.id !== action.payload.id ? contact : null\n        ),\n      };\n    case SET_CURRENT: {\n      return {\n        ...state,\n        current: action.payload,\n      };\n    }\n    case CLEAR_CURRENT: {\n      return {\n        ...state,\n        current: null,\n      };\n    }\n    case UPDATE_CONTACT: {\n      return {\n        ...state,\n        contacts: state.contacts.map((contact) =>\n          contact.id === action.payload.id ? action.payload : contact\n        ),\n      };\n    }\n    case FILTER_CONTACTS: {\n      return {\n        ...state,\n        filterSearch: action.payload,\n        filtered: state.contacts.filter((contact) => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        }),\n      };\n    }\n\n    case CONTACT_ERROR: {\n      return {\n        ...state,\n      };\n    }\n\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null,\n        filterSearch: '',\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}