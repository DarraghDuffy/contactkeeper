{"ast":null,"code":"import { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CONTACT_ERROR, CLEAR_FILTER, REGISTER_SUCCESS, REGISTER_FAIL } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return { ...state,\n        users: action.payload,\n        loading: false\n      };\n\n    case ADD_CONTACT:\n      return { ...state,\n        contacts: [...state.contacts, action.payload]\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact.id !== action.payload.id ? contact : null)\n      };\n\n    case SET_CURRENT:\n      {\n        return { ...state,\n          current: action.payload\n        };\n      }\n\n    case CLEAR_CURRENT:\n      {\n        return { ...state,\n          current: null\n        };\n      }\n\n    case UPDATE_CONTACT:\n      {\n        return { ...state,\n          contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact)\n        };\n      }\n\n    case FILTER_CONTACTS:\n      {\n        return { ...state,\n          filterSearch: action.payload,\n          filtered: state.contacts.filter(contact => {\n            const regex = new RegExp(`${action.payload}`, 'gi');\n            return contact.name.match(regex) || contact.email.match(regex);\n          })\n        };\n      }\n\n    case CONTACT_ERROR:\n      {\n        return { ...state\n        };\n      }\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null,\n        filterSearch: ''\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/darragh/Documents/git/React/frontToBack/contactkeeper/src/context/auth/authReducer.js"],"names":["GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CONTACT_ERROR","CLEAR_FILTER","REGISTER_SUCCESS","REGISTER_FAIL","state","action","type","users","payload","loading","contacts","filter","contact","id","current","map","filterSearch","filtered","regex","RegExp","name","match","email"],"mappings":"AAAA,SACEA,YADF,EAEEC,WAFF,EAGEC,cAHF,EAIEC,WAJF,EAKEC,aALF,EAMEC,cANF,EAOEC,eAPF,EAQEC,aARF,EASEC,YATF,EAUEC,gBAVF,EAWEC,aAXF,QAYO,UAZP;AAcA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,YAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELG,QAAAA,KAAK,EAAEF,MAAM,CAACG,OAFT;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKf,WAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELM,QAAAA,QAAQ,EAAE,CAAC,GAAGN,KAAK,CAACM,QAAV,EAAoBL,MAAM,CAACG,OAA3B;AAFL,OAAP;;AAIF,SAAKb,cAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELM,QAAAA,QAAQ,EAAEN,KAAK,CAACM,QAAN,CAAeC,MAAf,CAAuBC,OAAD,IAC9BA,OAAO,CAACC,EAAR,KAAeR,MAAM,CAACG,OAAP,CAAeK,EAA9B,GAAmCD,OAAnC,GAA6C,IADrC;AAFL,OAAP;;AAMF,SAAKhB,WAAL;AAAkB;AAChB,eAAO,EACL,GAAGQ,KADE;AAELU,UAAAA,OAAO,EAAET,MAAM,CAACG;AAFX,SAAP;AAID;;AACD,SAAKX,aAAL;AAAoB;AAClB,eAAO,EACL,GAAGO,KADE;AAELU,UAAAA,OAAO,EAAE;AAFJ,SAAP;AAID;;AACD,SAAKhB,cAAL;AAAqB;AACnB,eAAO,EACL,GAAGM,KADE;AAELM,UAAAA,QAAQ,EAAEN,KAAK,CAACM,QAAN,CAAeK,GAAf,CAAoBH,OAAD,IAC3BA,OAAO,CAACC,EAAR,KAAeR,MAAM,CAACG,OAAP,CAAeK,EAA9B,GAAmCR,MAAM,CAACG,OAA1C,GAAoDI,OAD5C;AAFL,SAAP;AAMD;;AACD,SAAKb,eAAL;AAAsB;AACpB,eAAO,EACL,GAAGK,KADE;AAELY,UAAAA,YAAY,EAAEX,MAAM,CAACG,OAFhB;AAGLS,UAAAA,QAAQ,EAAEb,KAAK,CAACM,QAAN,CAAeC,MAAf,CAAuBC,OAAD,IAAa;AAC3C,kBAAMM,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEd,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,mBAAOI,OAAO,CAACQ,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BN,OAAO,CAACU,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACD,WAHS;AAHL,SAAP;AAQD;;AAED,SAAKlB,aAAL;AAAoB;AAClB,eAAO,EACL,GAAGI;AADE,SAAP;AAGD;;AAED,SAAKH,YAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELa,QAAAA,QAAQ,EAAE,IAFL;AAGLD,QAAAA,YAAY,EAAE;AAHT,OAAP;;AAKF;AACE,aAAOZ,KAAP;AA/DJ;AAiED,CAlED","sourcesContent":["import {\n  GET_CONTACTS,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  FILTER_CONTACTS,\n  CONTACT_ERROR,\n  CLEAR_FILTER,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n} from '../types';\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return {\n        ...state,\n        users: action.payload,\n        loading: false,\n      };\n    case ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [...state.contacts, action.payload],\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter((contact) =>\n          contact.id !== action.payload.id ? contact : null\n        ),\n      };\n    case SET_CURRENT: {\n      return {\n        ...state,\n        current: action.payload,\n      };\n    }\n    case CLEAR_CURRENT: {\n      return {\n        ...state,\n        current: null,\n      };\n    }\n    case UPDATE_CONTACT: {\n      return {\n        ...state,\n        contacts: state.contacts.map((contact) =>\n          contact.id === action.payload.id ? action.payload : contact\n        ),\n      };\n    }\n    case FILTER_CONTACTS: {\n      return {\n        ...state,\n        filterSearch: action.payload,\n        filtered: state.contacts.filter((contact) => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        }),\n      };\n    }\n\n    case CONTACT_ERROR: {\n      return {\n        ...state,\n      };\n    }\n\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null,\n        filterSearch: '',\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}