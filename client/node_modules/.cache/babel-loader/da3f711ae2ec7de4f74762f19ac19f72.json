{"ast":null,"code":"import { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CONTACT_ERROR, CLEAR_FILTER, CLEAR_CONTACTS } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return { ...state,\n        contacts: action.payload,\n        loading: false\n      };\n\n    case ADD_CONTACT:\n      return { ...state,\n        loading: false,\n        contacts: [...state.contacts, action.payload]\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        loading: false,\n        contacts: state.contacts.filter(contact => contact._id !== action.payload.id ? contact : null)\n      };\n\n    case SET_CURRENT:\n      {\n        return { ...state,\n          current: action.payload\n        };\n      }\n\n    case CLEAR_CURRENT:\n      {\n        return { ...state,\n          current: null\n        };\n      }\n\n    case UPDATE_CONTACT:\n      {\n        return { ...state,\n          loading: false,\n          contacts: state.contacts.map(contact => contact._id === action.payload._id ? action.payload : contact)\n        };\n      }\n\n    case FILTER_CONTACTS:\n      {\n        return { ...state,\n          filterSearch: action.payload,\n          filtered: state.contacts.filter(contact => {\n            const regex = new RegExp(`${action.payload}`, 'gi');\n            return contact.name.match(regex) || contact.email.match(regex);\n          })\n        };\n      }\n\n    case CONTACT_ERROR:\n      {\n        return { ...state,\n          error: action.payload\n        };\n      }\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null,\n        filterSearch: ''\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/darragh/Documents/git/React/frontToBack/contactkeeper/src/context/contact/contactReducer.js"],"names":["GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CONTACT_ERROR","CLEAR_FILTER","CLEAR_CONTACTS","state","action","type","contacts","payload","loading","filter","contact","_id","id","current","map","filterSearch","filtered","regex","RegExp","name","match","email","error"],"mappings":"AAAA,SACEA,YADF,EAEEC,WAFF,EAGEC,cAHF,EAIEC,WAJF,EAKEC,aALF,EAMEC,cANF,EAOEC,eAPF,EAQEC,aARF,EASEC,YATF,EAUEC,cAVF,QAWO,UAXP;AAaA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,YAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELG,QAAAA,QAAQ,EAAEF,MAAM,CAACG,OAFZ;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKd,WAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELK,QAAAA,OAAO,EAAE,KAFJ;AAGLF,QAAAA,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAV,EAAoBF,MAAM,CAACG,OAA3B;AAHL,OAAP;;AAKF,SAAKZ,cAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELK,QAAAA,OAAO,EAAE,KAFJ;AAGLF,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeG,MAAf,CAAuBC,OAAD,IAC9BA,OAAO,CAACC,GAAR,KAAgBP,MAAM,CAACG,OAAP,CAAeK,EAA/B,GAAoCF,OAApC,GAA8C,IADtC;AAHL,OAAP;;AAOF,SAAKd,WAAL;AAAkB;AAChB,eAAO,EACL,GAAGO,KADE;AAELU,UAAAA,OAAO,EAAET,MAAM,CAACG;AAFX,SAAP;AAID;;AACD,SAAKV,aAAL;AAAoB;AAClB,eAAO,EACL,GAAGM,KADE;AAELU,UAAAA,OAAO,EAAE;AAFJ,SAAP;AAID;;AACD,SAAKf,cAAL;AAAqB;AACnB,eAAO,EACL,GAAGK,KADE;AAELK,UAAAA,OAAO,EAAE,KAFJ;AAGLF,UAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeQ,GAAf,CAAoBJ,OAAD,IAC3BA,OAAO,CAACC,GAAR,KAAgBP,MAAM,CAACG,OAAP,CAAeI,GAA/B,GAAqCP,MAAM,CAACG,OAA5C,GAAsDG,OAD9C;AAHL,SAAP;AAOD;;AACD,SAAKX,eAAL;AAAsB;AACpB,eAAO,EACL,GAAGI,KADE;AAELY,UAAAA,YAAY,EAAEX,MAAM,CAACG,OAFhB;AAGLS,UAAAA,QAAQ,EAAEb,KAAK,CAACG,QAAN,CAAeG,MAAf,CAAuBC,OAAD,IAAa;AAC3C,kBAAMO,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEd,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,mBAAOG,OAAO,CAACS,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BP,OAAO,CAACW,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACD,WAHS;AAHL,SAAP;AAQD;;AAED,SAAKjB,aAAL;AAAoB;AAClB,eAAO,EACL,GAAGG,KADE;AAELmB,UAAAA,KAAK,EAAElB,MAAM,CAACG;AAFT,SAAP;AAID;;AAED,SAAKN,YAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELa,QAAAA,QAAQ,EAAE,IAFL;AAGLD,QAAAA,YAAY,EAAE;AAHT,OAAP;;AAKF;AACE,aAAOZ,KAAP;AAnEJ;AAqED,CAtED","sourcesContent":["import {\n  GET_CONTACTS,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  FILTER_CONTACTS,\n  CONTACT_ERROR,\n  CLEAR_FILTER,\n  CLEAR_CONTACTS,\n} from '../types';\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return {\n        ...state,\n        contacts: action.payload,\n        loading: false,\n      };\n    case ADD_CONTACT:\n      return {\n        ...state,\n        loading: false,\n        contacts: [...state.contacts, action.payload],\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        loading: false,\n        contacts: state.contacts.filter((contact) =>\n          contact._id !== action.payload.id ? contact : null\n        ),\n      };\n    case SET_CURRENT: {\n      return {\n        ...state,\n        current: action.payload,\n      };\n    }\n    case CLEAR_CURRENT: {\n      return {\n        ...state,\n        current: null,\n      };\n    }\n    case UPDATE_CONTACT: {\n      return {\n        ...state,\n        loading: false,\n        contacts: state.contacts.map((contact) =>\n          contact._id === action.payload._id ? action.payload : contact\n        ),\n      };\n    }\n    case FILTER_CONTACTS: {\n      return {\n        ...state,\n        filterSearch: action.payload,\n        filtered: state.contacts.filter((contact) => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        }),\n      };\n    }\n\n    case CONTACT_ERROR: {\n      return {\n        ...state,\n        error: action.payload,\n      };\n    }\n\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null,\n        filterSearch: '',\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}